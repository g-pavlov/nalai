# Test cases for HTTP tools functionality

http_request_validation:
  - name: "valid_base_url"
    input:
      url: "https://api.example.com/users"
      base_url: "https://api.example.com"
    expected: true
  
  - name: "invalid_base_url"
    input:
      url: "https://malicious.com/users"
      base_url: "https://api.example.com"
    expected: false
  
  - name: "subdomain_allowed"
    input:
      url: "https://api.example.com/v1/users"
      base_url: "https://api.example.com"
    expected: true

http_request_headers:
  - name: "with_auth_token"
    input:
      configurable:
        auth_token: "test-token"
      user_headers:
        Content-Type: "application/json"
        Accept: "application/json"
    expected:
      Authorization: "Bearer test-token"
      Content-Type: "application/json"
      Accept: "application/json"
  
  - name: "no_auth_token"
    input:
      configurable: {}
      user_headers:
        Content-Type: "application/json"
    expected:
      Content-Type: "application/json"
  
  - name: "user_headers_override_internal"
    input:
      configurable:
        auth_token: "test-token"
      user_headers:
        Authorization: "Bearer user-token"
        Content-Type: "application/json"
    expected:
      Authorization: "Bearer test-token"
      Content-Type: "application/json"

http_request_payloads:
  - name: "get_request_params"
    input:
      method: "GET"
      input_data:
        page: 1
        limit: 10
    expected:
      params:
        page: 1
        limit: 10
      json: null
  
  - name: "post_request_json"
    input:
      method: "POST"
      input_data:
        name: "John Doe"
        email: "john@example.com"
    expected:
      params: null
      json:
        name: "John Doe"
        email: "john@example.com"
  
  - name: "put_request_json"
    input:
      method: "PUT"
      input_data:
        id: 123
        name: "Jane Doe"
    expected:
      params: null
      json:
        id: 123
        name: "Jane Doe"

http_response_handling:
  - name: "successful_response"
    input:
      status_code: 200
      json_data: {"users": [{"id": 1, "name": "John"}]}
    expected:
      success: true
      data: {"users": [{"id": 1, "name": "John"}]}
  
  - name: "empty_response"
    input:
      status_code: 204
      json_data: null
    expected:
      success: true
      data: {}
  
  - name: "http_error"
    input:
      status_code: 404
      error_message: "Not Found"
    expected:
      success: false
      error_type: "HTTPError"
      status_code: 404 