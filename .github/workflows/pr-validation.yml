name: PR Validation

on:
  push:
    branches-ignore:
      - 'main'
      - 'docs'
      - 'docs/**'
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'Dockerfile'
      - 'Makefile'
      - '.github/workflows/**'
      - 'scripts/**'
      - 'data/**'
      - 'models/**'
      - '!**/*.md'
      - '!**/*.txt'
      - '!**/*.png'
      - '!**/*.jpg'
      - '!**/*.jpeg'
      - '!**/*.gif'
      - '!**/*.svg'
      - '!docs/**'
      - '!LICENSE'
      - '!README.md'
      - '!SUPPORT.md'
      - '!CODE_OF_CONDUCT.md'
      - '!CONTRIBUTING.md'
      - '!CODEOWNERS'

jobs:
  # Lint and Test Job
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make install

      - name: Run linting and formatting
        run: make lint

      - name: Run unit tests with coverage
        run: make test

      - name: Validate dependencies
        run: make validate-deps

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: feature-branch
          name: codecov-feature

  # # Build Docker Image (for testing, not pushing)
  # build-test:
  #   runs-on: ubuntu-latest
  #   needs: lint-and-test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build Docker image for testing
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: false
  #         tags: nalai:${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     - name: Test Docker image
  #       run: |
  #         docker run --rm -d --name test-nalai -p 8080:8080 nalai:${{ github.sha }}
  #         sleep 5
  #         curl -f http://localhost:8080/healthz || exit 1
  #         docker stop test-nalai

  # Security check
  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 