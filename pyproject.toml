[tool.poetry]
name = "api-assistant"
version = "0.1.0"
description = "A conversational AI agent for API integration and testing"
authors = ["John Doe <john.doe@example.com>"]
packages = [
    { include = "api_assistant", from = "src" }
]
keywords = ["api", "assistant", "ai", "conversational", "integration", "testing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.scripts]
api_assistant = "api_assistant.cli:main"

[tool.poetry.dependencies]
python = "^3.12"
# Core framework dependencies
langchain = "^0.3.1"
langchain-core = "^0.3.7"
langgraph = "0.5.1"
langgraph-prebuilt = "^0.5.2"
langgraph-checkpoint = "^2.1.0"
langgraph-sdk = "0.1.69"

# Web framework and server
fastapi = "^0.115.0"
uvicorn = ">=0.23.2,<0.24.0"
httpx = ">=0.27.2,<1.0.0"

# Configuration and environment
python-dotenv = "^1.0.1"
PyJWT = "^2.8.0"

# Logging and utilities
python-json-logger = "^2.0.7"
rich = "^13.7.0"

# Data processing and utilities
tiktoken = "^0.7.0"
pyyaml = "^6.0.1"
pydantic-settings = "^2.10.1"
grandalf = "^0.8"
aiohttp = "^3.12.14"
requests = "^2.32.4"

[tool.poetry.group.llm]
optional = true

[tool.poetry.group.llm.dependencies]
langchain-aws = "^0.2.1"
langchain-ollama = "^0.3.4"
langchain-openai = "^0.3.28"

[tool.poetry.group.testing]
optional = true

[tool.poetry.group.testing.dependencies]
responses = "^0.25.0"
deepeval = [
    {version="^3.0.2", python=">=3.12,<3.14"}
]
datasets = "^2.18.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ruff = "^0.12.1"
pytest = "^8.3.2"
pytest-asyncio = "^1.0.0"
aiohttp = "^3.12.14"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output options
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings"
]

# Markers
markers = [
    "asyncio: mark test to be run with asyncio",
    "production: marks tests as production-related",
    "development: marks tests as development-related",
    "docker: marks tests as docker-related",
    "build: marks tests as build-related",
    "analysis: marks tests as analysis-related",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# Test collection
collect_ignore = [
    "__pycache__",
    ".pytest_cache",
    "*.pyc"
]

# Minimum version
minversion = "6.0"

# Filter warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Async configuration
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]